/*
The main idea is to reach Q by the coin with lowest W/A ratio at the end. Say 0th coin has lowest W/A.
Then, we can't use other coins more than A[0] times, otherwise we can replace them with 0th coin.
A[0]'s max value is 100, there are ~100 other coins and we can't use them more than 100 times,
and their values are ~100. So after 1e6 coin value we must use only 0th coin.
*/
//#pragma GCC optimize("Ofast")
//#pragma GCC optimize ("unroll-loops")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#pragma warning(disable:4786)
#pragma warning(disable:4996)
#include <ctime>
#include<list>
#include <numeric>
#include<bitset>
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<vector>
#include<set>
#include<map>
#include<functional>
#include<string>
#include<cstring>
#include<cstdlib>
#include<queue>
#include<utility>
#include<fstream>
#include<sstream>
#include<cmath>
#include<stack>
#include<assert.h>
#include<unordered_map>
#include<unordered_set>
using namespace std;

#define MEM(a, b) memset(a, (b), sizeof(a))
#define CLR(a) memset(a, 0, sizeof(a))
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define MIN(a, b) ((a) < (b) ? (a) : (b))
#define ABS(X) ( (X) > 0 ? (X) : ( -(X) ) )
#define S(X) ( (X) * (X) )
#define SZ(V) (int )V.size()
#define FORN(i, n) for(int i = 0; i < n; i++)
#define FORAB(i, a, b) for(int i = a; i <= b; i++)
#define ALL(V) V.begin(), V.end()
#define IN(A, B, C)  ((B) <= (A) && (A) <= (C))
#define AIN(A, B, C) assert(IN(A, B, C))

//typedef int LL;
typedef long long int LL;
//typedef __int128 LLL;
typedef long long LLL;

typedef pair<int, int> PII;
typedef pair<LL, LL> PLL;
typedef pair<double, double> PDD;
typedef vector<int> VI;
typedef vector<LL> VL;
typedef vector<PII > VP;
typedef vector<PLL > VPL;
typedef vector<double> VD;
typedef long double ld;

LL dp[1000002];
int N, C, M;
LL A[102], W[102];

void solve(int ks) {
	scanf("%d %d %d", &N, &C, &M);
	for (int i = 0; i < N; i++) {
		scanf("%lld %lld", &A[i], &W[i]);
	}

	for (int i = 1; i < N; i++) {
		if (W[i] * A[0] < W[0] * A[i]) {
			swap(W[i], W[0]);
			swap(A[i], A[0]);
		}
	}

	dp[0] = 0;
	for (int i = 1; i <= 1000000; i++) {
		dp[i] = -1;
		for (int j = 0; j < N; j++) {
			if (A[j] <= i && dp[i - A[j]] != -1) {
				if (dp[i] == -1 || dp[i] > dp[i - A[j]] + W[j]) {
					dp[i] = dp[i - A[j]] + W[j];
				}
			}
		}
	}

	const LL MOD = 1000000007;

	while (M--) {
		LL q;
		scanf("%lld", &q);

		if (q <= 1000000) printf("%lld\n", dp[q] == -1 ? -1 : dp[q] % MOD);
		else {
			int at = 1000000;
			while (at % A[0] != q % A[0]) at--;
			LL ans = (dp[at] == -1 ? -1 : ((dp[at] + (((q - at) / A[0]) % MOD) * W[0]))%MOD);
			printf("%lld\n", ans);
		}
	}
}

int main()
{
#ifdef LOCAL
	double start_time = clock();
	freopen("C:\\Home\\ContestCodes\\sample.in", "r", stdin);
	//	freopen("out.out", "w", stdout);
#endif


	if (0) {
		int T = 1000;
		scanf("%d", &T);
		for (int ks = 1; ks <= T; ks++) solve(ks);
	}
	else {
		solve(0);
	}

#ifdef LOCAL
	double end_time = clock();
	fprintf(stderr, "Time = %lf\n", (end_time - start_time) / CLOCKS_PER_SEC);
#endif

	return 0;
}
